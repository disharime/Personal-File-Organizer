# -*- coding: utf-8 -*-
"""Python File Organizer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11fDWX5ryM3FsDMv4lvZjq6NhNsy_1csI
"""

import os
import shutil

def organize_files(source_directory):
    """
    Hello there, fellow organizer! This little function is your personal assistant
    for tidying up files in a chosen directory. It'll sort your files into neat
    subfolders based on what kind of file they are (like pictures, documents, etc.).

    Args:
        source_directory (str): The path to the directory that's craving some organization.
                                Think of it as the messy room we're about to clean!
    """
    categories = {
        " Images": ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp'],
        " Documents": ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt'],
        " Videos": ['.mp4', '.mov', '.avi', '.mkv', '.flv', '.wmv'],
        " Audio": ['.mp3', '.wav', '.aac', '.flac', '.ogg'],
        " Archives": ['.zip', '.rar', '.7z', '.tar', '.gz'],
        " Executables": ['.exe', '.dmg', '.app', '.bat', '.sh'],
        " Code Files": ['.py', '.js', '.html', '.css', '.java', '.c', '.cpp', '.h', '.json', '.xml'],
        " Spreadsheets": ['.xls', '.xlsx', '.csv', '.ods'], # Dedicated bin for your numbers!
        " Presentations": ['.ppt', '.pptx', '.key', '.odp'], # For all your brilliant slides!
        " Others": [] # The catch-all bin for anything that doesn't quite fit elsewhere.
    }

    if not os.path.isdir(source_directory):
        print(f"Oops! It seems the directory '{source_directory}' doesn't exist. ")
        print("Please double-check the path and try again. I can't organize what isn't there!")
        return # Time to gracefully exit if the path is wrong.

    print(f"\nAlright, let's get to work! I'm starting to organize files in: '{source_directory}'")
    print("Hold tight, this might take a moment if you have a lot of files... ðŸ§¹")

    for filename in os.listdir(source_directory):
        current_item_path = os.path.join(source_directory, filename)

        if os.path.isdir(current_item_path):
            continue

        file_name_without_ext, file_extension = os.path.splitext(filename)
        file_extension = file_extension.lower() # Converting to lowercase makes matching easier and more reliable!

        destination_folder_name = " Others" # If it doesn't match any specific category, it goes here by default.

        for category_name, extensions_list in categories.items():
            if file_extension in extensions_list:
                destination_folder_name = category_name # Found its home!
                break # No need to check other categories once we've found a match.

        # build the full path for where this file is going to live.
        destination_path_for_folder = os.path.join(source_directory, destination_folder_name)

        try:
            os.makedirs(destination_path_for_folder, exist_ok=True)
            # print(f"Ensured folder '{destination_folder_name}' exists.") # Uncomment for more detailed output
        except OSError as e:
            print(f"Uh oh! I had trouble creating the folder '{destination_path_for_folder}'. Error: {e}")
            print(f"Skipping '{filename}' because its new home couldn't be prepared. ")
            continue

        destination_file_full_path = os.path.join(destination_path_for_folder, filename)

        try:
            if os.path.exists(destination_file_full_path):
                print(f"Heads up! '{filename}' already exists in '{destination_folder_name}/'.")
                print("I'm skipping this one to avoid overwriting. You might want to rename it manually later. ")
                continue

            shutil.move(current_item_path, destination_file_full_path)
            print(f" Moved '{filename}' to the '{destination_folder_name}' folder!")
        except shutil.Error as e:
            print(f"Oh dear! I couldn't move '{filename}'. Maybe it's in use? Error: {e}")
        except Exception as e: # Catch any other unexpected issues during the move.
            print(f"An unexpected hiccup occurred while moving '{filename}'. Error: {e}")

    print("\n Fantastic! Your files are now beautifully organized!")
    print("Go take a look in your chosen directory and enjoy the tidiness! ")
    print("Remember to always back up important files before running scripts like this. Stay safe! ")